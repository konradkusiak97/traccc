/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2021-2022 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// SYCL library include(s).
#include "../utils/get_queue.hpp"

// Spacepoint formation include(s).
#include "spacepoint_formation.hpp"

// SYCL include(s)
#include <CL/sycl.hpp>

namespace traccc::sycl {

void spacepoint_formation(
    spacepoint_container_view spacepoints_view,
    measurement_container_view measurements_view,
    vecmem::data::vector_view<const device::prefix_sum_element_t>
        measurements_prefix_sum_view,
    queue_wrapper queue) {

    // The execution range of the kernel
    auto n_measurements = measurements_prefix_sum_view.size();

    // Calculate the execution NDrange for the kernel
    auto wGroupSize = 64;
    auto num = (n_measurements + wGroupSize - 1) / wGroupSize;
    auto ndrange = ::sycl::nd_range<1>{::sycl::range<1>(num * wGroupSize),
                                       ::sycl::range<1>(wGroupSize)};

    details::get_queue(queue)
        .submit([&ndrange, &spacepoints_view, &measurements_view,
                 &measurements_prefix_sum_view](::sycl::handler& h) {
            h.parallel_for<class SpacepointFormation>(
                ndrange, [=](::sycl::nd_item<1> item) {
                    // Get the global idx
                    auto idx = item.get_global_linear_id();

                    // Initialize device containers
                    device_measurement_container measurements_device(
                        measurements_view);
                    device_spacepoint_container spacepoints_device(
                        spacepoints_view);
                    vecmem::device_vector<const device::prefix_sum_element_t>
                        measurements_prefix_sum(measurements_prefix_sum_view);

                    // Ignore if idx is out of range
                    if (idx >= measurements_prefix_sum.size())
                        return;

                    // Get the indices from the prefix sum vector
                    const auto module_idx = measurements_prefix_sum[idx].first;
                    const auto measurement_idx =
                        measurements_prefix_sum[idx].second;

                    // Get the measurement for rhis idx
                    const auto& m = measurements_device[module_idx].items.at(
                        measurement_idx);

                    // current cell module
                    const auto& module = measurements_device[module_idx].header;

                    // Form a spacepoint based on this measurement
                    point3 local_3d = {m.local[0], m.local[1], 0.};
                    point3 global = module.placement.point_to_global(local_3d);
                    spacepoint s({global, m});

                    // Push the speacpoint into the container at the appropriate
                    // module idx
                    spacepoints_device[module_idx].header = module.module;
                    spacepoints_device[module_idx].items.push_back(s);
                });
        })
        .wait_and_throw();
}

}  // namespace traccc::sycl
