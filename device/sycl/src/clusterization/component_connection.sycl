/** TRACCC library, part of the ACTS project (R&D line)
 *
 * (c) 2022 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// SYCL library include(s).
#include "../utils/get_queue.hpp"

// SYCL include(s).
#include <CL/sycl.hpp>

// Project include(s).
#include "component_connection.hpp"

namespace traccc::sycl {

void component_connection(
    cluster_container_view clusters_view,
    const host_cell_container& cells_per_event,
    vecmem::data::jagged_vector_view<unsigned int> sparse_ccl_indices_view,
    vecmem::data::vector_view<std::size_t> cluster_prefix_sum_view,
    const std::size_t& cells_max,
    vecmem::memory_resource& resource, queue_wrapper queue) {

    // Execution size of the algorithm
    std::size_t N = cells_per_event.size();

    // Calculate the execution NDrange for the kernel
    auto workGroupSize = 32;
    auto num = (N + workGroupSize - 1) / workGroupSize;
    auto num2 = (cells_max + workGroupSize - 1) / workGroupSize; 
    auto ndrange = ::sycl::nd_range<2>{::sycl::range<2>(num*workGroupSize,num2*workGroupSize),
                                       ::sycl::range<2>(workGroupSize,workGroupSize)};

    // Get the view of the cells container
    auto cells_data = get_data(cells_per_event, &resource);
    cell_container_const_view cells_view(cells_data);

    details::get_queue(queue)
        .parallel_for<class ComponentConnection>(
            ndrange,
            [cells_view, cluster_prefix_sum_view, clusters_view,
             sparse_ccl_indices_view](::sycl::nd_item<2> item) {
                // Get the global index
                // auto idx = item.get_global_linear_id();
                auto idx = item.get_global_id(0);
                auto id_y = item.get_global_id(1);

                // Initialize the data on the device
                device_cell_const_container cells_device(cells_view);
                device_cluster_container clusters_device(clusters_view);

                // Ignore if idx is out of range
                if (idx >= cells_device.size())
                    return;

                // Get the cells from the current module
                const auto cells = cells_device.at(idx).items;
                const auto module = cells_device.at(idx).header;

                // Vectors used for cluster indices found by sparse CCL
                vecmem::jagged_device_vector<unsigned int>
                    device_sparse_ccl_indices(sparse_ccl_indices_view);
                const auto cluster_indices = device_sparse_ccl_indices.at(idx);

                // Number of clusters found for this module
                const auto num_clusters = cluster_indices.back();

                vecmem::device_vector<std::size_t> device_cluster_prefix_sum(
                    cluster_prefix_sum_view);
                const auto prefix_sum = device_cluster_prefix_sum[idx];

                // Push back the cells to the correct item vector
                // for (std::size_t j = 0; j < cells.size(); ++j) {
                //     cindex = cluster_indices[j] - 1;
                //     if (cindex < num_clusters) {
                //         clusters_device[prefix_sum + cindex].header = cl_id;
                //         clusters_device[prefix_sum + cindex].items.push_back(
                //             cells[j]);
                //     }
                // }
                unsigned int cindex;
                if (id_y < cells.size()) {
                    cindex = cluster_indices[id_y] - 1;
                    if (cindex < num_clusters) {
                        // Create cluster id - same for all clusters in this module
                        cluster_id cl_id{};
                        cl_id.module = module.module;
                        cl_id.placement = module.placement;
                        cl_id.module_idx = idx;
                        cl_id.pixel = module.pixel;
                        clusters_device[prefix_sum + cindex].header = cl_id;
                        clusters_device[prefix_sum + cindex].items.push_back(
                            cells[id_y]);
                    }
                }

            })
        .wait_and_throw();
}

}  // namespace traccc::sycl